Z=BaseException
Y=enumerate
S=ord
R=sum
Q=print
N=getattr
L=len
J=None
H=range
E=int
D=list
import builtins as I
I.__builtins__=__builtins__
C=[41,100,95,100,95,100,105,100,109,100,112,100,111,100,114,100,116,100,95,100,95,63,30,0,30,2,130,2,63,30,1,30,3,69,1,63,41,100,108,100,101,100,110,63,30,0,30,5,130,2,63,30,1,30,6,69,1,63,41,100,104,100,97,100,115,100,97,100,116,100,116,100,114,63,30,0,30,8,130,2,63,30,1,30,9,69,1,63,41,100,112,100,114,100,105,100,110,100,116,63,30,0,30,11,130,2,63,30,1,30,12,69,1,63,41,100,86,100,97,100,108,100,117,100,101,100,69,100,114,100,114,100,111,100,114,63,30,0,30,14,130,2,63,30,1,30,15,69,1,63,41,100,115,100,108,100,105,100,99,100,101,63,30,0,30,17,130,2,63,30,1,30,18,69,1,63,41,100,108,100,105,100,115,100,116,63,30,0,30,20,130,2,63,30,1,30,21,69,1,63,41,100,103,100,108,100,111,100,98,100,97,100,108,100,115,63,30,0,30,23,130,2,63,30,1,30,24,69,1,63,41,100,105,100,116,100,101,100,114,63,30,0,30,26,130,2,63,30,1,30,27,69,1,63,41,100,110,100,101,100,120,100,116,63,30,0,30,29,130,2,63,30,1,30,30,69,1,63,41,100,105,100,115,100,105,100,110,100,115,100,116,100,97,100,110,100,99,100,101,63,30,0,30,32,130,2,63,30,1,30,33,69,1,63,41,100,83,100,116,100,111,100,112,100,73,100,116,100,101,100,114,100,97,100,116,100,105,100,111,100,110,63,30,0,30,35,130,2,63,30,1,30,36,69,1,63,41,100,95,100,95,100,105,100,109,100,112,100,111,100,114,100,116,100,95,100,95,63,30,0,30,38,130,2,63,30,1,30,39,69,1,63,41,100,111,100,112,100,101,100,114,100,97,100,116,100,111,100,114,63,30,41,130,1,63,30,40,30,42,69,1,63,41,100,103,100,101,100,116,100,105,100,116,100,101,100,109,63,30,43,30,44,130,2,63,30,1,30,45,69,1,63,41,100,108,100,116,63,30,43,30,47,130,2,63,30,1,30,48,69,1,63,41,100,99,100,111,100,110,100,116,100,97,100,105,100,110,100,115,63,30,43,30,50,130,2,63,30,1,30,51,69,1,63,41,100,103,100,116,63,30,43,30,53,130,2,63,30,1,30,54,69,1,63,41,100,105,100,115,100,95,63,30,43,30,56,130,2,63,30,1,30,57,69,1,63,41,100,112,100,111,100,119,63,30,43,30,59,130,2,63,30,1,30,60,69,1,63,41,100,110,100,101,100,103,63,30,43,30,62,130,2,63,30,1,30,63,69,1,63,41,100,97,100,100,100,100,63,30,43,30,65,130,2,63,30,1,30,66,69,1,63,41,100,109,100,111,100,100,63,30,43,30,68,130,2,63,30,1,30,69,69,1,63,41,100,105,100,97,100,100,100,100,63,30,43,30,71,130,2,63,30,1,30,72,69,1,63,41,100,115,100,101,100,116,100,105,100,116,100,101,100,109,63,30,43,30,74,130,2,63,30,1,30,75,69,1,63,41,100,110,100,111,100,116,100,95,63,30,43,30,77,130,2,63,30,1,30,78,69,1,63,41,100,105,100,109,100,112,100,111,100,114,100,116,100,108,100,105,100,98,63,30,80,130,1,63,30,4,30,81,69,1,63,41,100,105,100,109,100,112,100,111,100,114,100,116,100,95,100,109,100,111,100,100,100,117,100,108,100,101,63,30,82,30,83,130,2,63,30,1,30,84,69,1,63,41,100,114,100,97,100,110,100,100,100,111,100,109,63,30,86,130,1,63,30,85,30,87,69,1,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,57,89,3,23,90,23,94,30,94,5,0,130,2,23,89,30,46,30,89,69,1,23,97,30,94,5,1,130,2,23,96,30,46,30,96,69,1,23,92,30,97,5,0,130,2,23,93,30,49,30,93,69,1,23,95,30,95,130,1,23,100,30,79,30,100,69,1,23,91,30,91,22,16,30,92,5,0,130,2,23,98,30,49,30,98,69,1,23,95,30,95,91,23,99,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,41,63,57,1129,3,23,181,23,110,30,110,5,0,130,2,23,149,30,46,30,149,69,1,23,129,30,110,5,1,130,2,23,101,30,46,30,101,69,1,23,97,30,110,5,2,130,2,23,115,30,46,30,115,69,1,23,92,41,100,115,100,101,100,101,100,100,23,102,30,181,30,102,130,2,23,121,30,52,30,121,69,1,23,128,30,128,22,50,41,100,112,100,111,100,112,23,176,30,181,30,176,130,2,23,164,30,1,30,164,69,1,23,156,41,100,115,100,101,100,101,100,100,23,103,30,103,130,1,23,135,30,156,30,135,69,1,23,128,30,128,130,1,23,116,30,79,30,116,69,1,23,104,30,104,22,50,30,110,130,1,23,145,30,7,30,145,69,1,23,173,30,173,5,3,130,2,23,197,30,55,30,197,69,1,23,128,30,128,22,16,30,110,5,3,130,2,23,175,30,46,30,175,69,1,23,128,30,128,130,1,23,194,30,79,30,194,69,1,23,120,30,120,22,4,5,J,23,128,41,100,115,100,116,100,114,100,105,100,110,100,103,23,154,30,154,130,1,23,192,30,85,30,192,69,1,23,141,41,100,112,100,114,100,105,100,110,100,116,100,97,100,98,100,108,100,101,23,137,30,141,30,137,130,2,23,153,30,10,30,153,69,1,23,165,30,165,130,1,23,138,30,79,30,138,69,1,23,133,30,133,22,49,41,100,115,100,116,100,114,100,105,100,110,100,103,100,46,100,112,100,114,100,105,100,110,100,116,100,97,100,98,100,108,100,101,23,125,30,125,130,1,23,185,30,85,30,185,69,1,23,165,41,100,112,100,114,100,105,100,110,100,116,100,97,100,98,100,108,100,101,23,180,30,141,30,180,130,2,23,155,30,1,30,155,69,1,23,196,30,97,30,92,130,2,23,134,30,99,30,134,69,1,23,108,30,108,22,186,41,100,97,100,32,100,97,100,110,100,100,100,32,100,98,100,32,100,109,100,117,100,115,100,116,100,32,100,98,100,101,100,32,100,110,100,111,100,110,100,45,100,110,100,101,100,103,100,97,100,116,100,105,100,118,100,101,100,32,100,105,100,110,100,116,100,101,100,103,100,101,100,114,100,115,23,190,30,190,130,1,23,119,30,13,30,119,69,1,44,41,100,97,100,32,100,97,100,110,100,100,100,32,100,98,100,32,100,109,100,117,100,115,100,116,100,32,100,98,100,101,100,32,100,110,100,111,100,110,100,45,100,110,100,101,100,103,100,97,100,116,100,105,100,118,100,101,100,32,100,105,100,110,100,116,100,101,100,103,100,101,100,114,100,115,23,188,30,188,130,1,23,146,30,16,30,146,69,1,23,199,30,199,5,J,80,30,128,5,J,130,2,23,179,30,58,30,179,69,1,23,198,30,198,22,65,5,10,5,4,130,2,23,136,30,61,30,136,69,1,23,132,5,1,30,132,130,2,23,177,41,100,114,100,97,100,110,100,100,100,105,100,110,100,116,23,117,30,88,30,117,130,2,23,113,30,1,30,113,69,1,23,112,30,112,30,177,69,1,23,128,5,6,130,1,23,142,30,64,30,142,69,1,23,105,5,J,30,105,5,J,130,3,23,193,30,19,30,193,69,1,23,195,30,196,30,195,130,2,23,183,30,46,30,183,69,1,23,139,30,139,130,1,23,167,30,22,30,167,69,1,23,187,30,187,130,1,23,162,30,128,130,1,23,151,41,100,82,100,97,100,110,100,100,100,111,100,109,23,111,30,88,30,111,130,2,23,126,30,1,30,126,69,1,23,174,30,174,30,151,69,1,23,168,41,100,115,100,104,100,117,100,102,100,102,100,108,100,101,23,178,30,168,30,178,130,2,23,109,30,1,30,109,69,1,23,106,30,106,30,162,69,1,44,30,187,130,1,23,191,30,7,30,191,69,1,23,152,41,23,157,30,129,130,1,23,170,30,28,30,170,69,1,23,148,5,0,130,1,23,147,30,79,30,147,69,1,23,172,45,235,2,30,172,22,235,109,17,30,148,130,1,23,158,30,31,30,158,69,1,23,182,76,72,37,23,161,30,161,30,37,130,2,23,130,30,34,30,130,69,1,23,189,30,189,22,8,30,161,23,163,56,1,72,5,30,161,5,J,80,72,163,30,182,130,1,23,122,41,100,105,100,110,100,100,100,101,100,120,23,131,30,187,30,131,130,2,23,160,30,1,30,160,69,1,23,118,30,118,30,122,69,1,23,144,30,144,30,97,130,2,23,107,30,67,30,107,69,1,23,124,30,124,30,152,130,2,23,166,30,70,30,166,69,1,23,150,30,187,30,150,130,2,23,127,30,46,30,127,69,1,23,143,30,157,30,143,130,2,23,140,30,73,30,140,69,1,23,157,30,97,30,92,130,2,23,171,30,67,30,171,69,1,23,159,30,159,30,97,130,2,23,184,30,184,5,0,130,2,23,114,30,46,30,114,69,1,23,97,30,184,5,1,130,2,23,169,30,46,30,169,69,1,23,92,5,0,130,1,23,186,30,79,30,186,69,1,23,172,72,-239,56,0,30,157,91,23,123,30,25,69,0,63,41,100,99,100,104,100,101,100,99,100,107,100,95,100,98,100,97,100,100,100,95,100,112,100,97,100,114,100,97,100,109,100,115,63,30,200,30,201,30,99,130,3,63,30,76,30,202,69,1,44,30,25,69,0,63,41,100,101,100,110,100,99,100,114,100,121,100,112,100,116,63,30,203,30,204,30,123,130,3,63,30,76,30,205,69,1,44]
A=[]
O=[I,N]
G=[]
F=[]
M=[]
def a():
	for C in H(1023):A.append(C-H(2,1024*8,4)[C])
	B.a+=A[-3]
def b():B.a+=1;A[-1]+=chr(C[B.a])
def c():
	if t in D(I):A=B.stack.pop();Q(t,A);B.stack.append([A,t])
def d():A.append(A.pop(A.pop()))
def e():A.append(C[L(D(A.pop()))-1])
def f():B.a+=1;O[C[B.a]]=A.pop()
def g():
	B=D(A);B.sort();C=[]
	for E in B:C.append(A[E])
	A.append(C[B[0]])
def h():B.a+=1;A.append(1 if A.pop()in A[B.a]else 0)
def i():
	A,C=M.pop()
	while G:
		D,H=G and G[-1]or(0,0)
		if A<=D<=B.a<=D+H<A+C:G.pop()
		else:break
	while F:
		E,I,J=F and F[-1]or(0,0,0)
		if A<=E<=B.a<=E+I<A+C:F.pop()
		else:break
	return True
def j():A.append(C[B.a-1]);B.a+=1
def k():
	E=N(B,A.pop());D=[]
	for F in H(L(E)):
		D=E.pop(0)
		if D==C[B.a]:B.a+=1
	A.append(D[:F])
def T():
	B=y
	for D in H(64):
		C=U()
		if B!=C:B=y
	A.append(B)
def l():
	C=D=E=2
	while C+D+E>0:
		F=B.stack.pop();B.a=F(B.stack.pop())
		if F in dir(I):A.append('1')
		else:A.append('0')
		C-=D*E+D+E
	B.a+=abs(C);return 0
def m():A.append((*A.pop(),))
def n():A.pop()
def o():O.append(A.pop())
def p():B.a+=1
def q():A.append(1 if A.pop()in D(I)else 0)
def r():B.a+=1;E=G.copy();D=C[B.a];F=A.pop()if D&1 else();H=A.pop()if D&2 else{};I=A.pop()(*(F),**H);J=G.copy();E==J and A.append(I)
def s():
	G=E(A.pop());F=D(map(E,G.split()));F.sort();F.reverse();C=0
	while C<G and F[C]==F[0]:C+=1
	A.append(0 if C==G else F[C]);B.a+=C
def u():A.append(1 if A.pop()in D(G)else 0)
def v():B.a+=1;D=C[B.a];B.a+=0 if A.pop()else D
def w():B.a+=2;A=C[B.a-1];D=C[B.a];F.append((B.a+1,A,D))
def x():
	B=513
	for E in D(C):
		if E<B:B=E
	A.append(B)
def z():
	E,C,D=64,128,256
	while E>C and C>D and D!=C and D%C!=0 and E%512==C%512:
		E=C*D;C=E*D;D=E*C
		if C-E>D:B.a+=1
	A.append(E+C*D)
def B():B.a=0
def A0():B=A.pop();A.append(memoryview(B))
def A1():
	B,C,D=0,0,0;E=[B%C%D]
	for D in [B,C]:D+=B;B+=C;C+=E[0]
	E.append(B+C*D);A.append(E)
def A2():A.append(1 if A.pop()in D(A)else 0)
def A3():
	A=[]
	for B in A:
		if R(A)<B/2:return 0
		elif R(A)-R(A[:B])<B**0.5:return 1
		else:return 0
def U():
	B=A.pop();C=[K()for A in H(127+E(B))];G=[K()for A in H(255+E(B))];D=[]
	for F in C:D.append([C[F],G[F]])
	A.append(D[E(B)])
def A4():
	A=K()
	while A!=0:A+=T()
	B.a+=A
def A5():
	for (E,F) in Y(D(C)):
		A.append(0 if F^E in A else 1)
		if B.a-A[0]==E:break
def A6():B.a+=1;D=C[B.a];A.append(tuple(A[-D:]));del A[-D-1:-1]
def A7():Q(D(C),B.a,D(A),sep='\n')
def K():
	B=A.pop();C=[A for A in H(E(B))]
	for D in C:
		if D in H(E(B)):A.append(C[D+E(B,2)]);break
def A8():
	B=A.pop()
	for (C,D) in Y(B):A.append(D+C-E(P,2))
def A9():
	N(B.loops,t)
	for C in t:
		if C==t[B.loops+B.a]:A.append(C);break
def AA():
	D=[0]*26;F=[0]*26
	for G in H(26):F[G]=D[G]=E(C[B.a+G])
	D.sort();D.reverse();B.a+=D[F]
	if D.count(D[0])==1:A.append(chr(S(F[F.index(D[1])])))
	else:A.pop(0)
def AB():
	A,D,E=F.pop();B.a+=1
	if C[B.a]:B.a=A+D+E+3
def AC():A.append(1 if A.pop()in D(C)else 0)
def AD():
	B=[D(A)[B]for B in H(L(D(A)))]
	for C in B:A.append(C)
def AE():A.append(float('inf'))
def AF():A.append(1.0)
def AG():A.append(F[A.pop()])
def AH():A.append(A[A.pop()])
def AI():
	B.a+=2;I=C[B.a];J=E(I);F=[]
	for G in H(J):
		D=E(C[B.a+G])
		if D%2==0:F.append(D)
		else:B.a+=D-G
	for K in F:A.append(K)
	return 0
def AJ():
	F=dir(I)
	for C in F:
		for D in F:
			if C==D and A[S(C[0])-S(D[0])]==F[E(C+D,36)]:B.a+=D;A.append(C)
def AK():A.append(1 if A.pop()in A.pop()else 0)
def AL():B.a+=1;A.append(C[B.a])
def AM():B.a+=1;A=C[B.a];B.a+=A
def AN():
	B.a+=3;E=C[B.a-2];I=C[B.a-1];D=B.a
	def H(*P,**Q):
		H.flags&1 and A.append(P);H.flags&2 and A.append(Q);M.append((D,E));R=B.a;B.a=D;L=D+E;K=J
		while B.a<L:
			try:
				if W[C[B.a]]():K=A.pop();break
			except Z as N:
				A.append(N)
				if not G:raise N
				I,O=G.pop()
				while F:
					S,T,U=F and F[-1]or(0,0,0)
					if S>I:F.pop()
					else:break
				if I<D<B.a<D+E<I+O:M.pop()
				B.a=I+O
				if not D<=B.a<L:return K
			B.a+=1
		else:M.pop()
		B.a=R;return K
	H.flags=I;B.a=D+E-1;A.append(H)
def AO():
	C=A.pop();B=A.pop()
	if C:raise B from C
	elif B:raise B
	else:raise
def AP():
	B=0
	for E in D(C):
		if E>B:B=E
	A.append(B)
def AQ():A.append(C[A.pop()])
def AR():
	C=B.a
	if C==iter(D(B.loops))[0]+1:A.append(C)
	else:return 1
def AS():B.a+=1;A=C[B.a];G.append((B.a,A))
def AT():A.append(B.a+1)
def AU():
	B.a+=3;D=A[C[B.a]];K=E(D);I=E(D);F=E(D);J=0
	for L in H(K-2):
		G=E(D)
		if G==I+F:J+=C[B.a];B.a+=F
		I,F,G=F,G,E(D)
	return J
def AV():A.append(1 if A.pop()in D(F)else 0)
def AW():A.append(0)
def AX():B=A.pop();C=[K()for A in H(127+E(B))];return C[0]
def AY():G.pop()
def AZ():B.a+=2;A.append(C[B.a]);A.append(A[C[B.a]])
def Aa():
	C=B.a;E=A.pop()
	if C in A:Q('0x'+C)
	for D in E:
		if A[0]==D:B.a=D-A[1];break
def Ab():A.append(N(I,A.pop()))
def Ac():A.append('')
def V():
	E=A.pop();F=A.pop()
	for C in D(A[-2]):
		if C==E//2+F//2:B.a+=V()
	A.append(C)
def Ad():A.append(L(D(A[C[B.a]])))
def Ae():B.a=F[-1][0]-1
def Af():B.a+=1;A.append(O[C[B.a]])
W={96:K,57:AN,63:o,146:j,170:d,98:AX,72:AM,84:A0,139:z,144:x,56:AB,71:h,40:AQ,114:g,177:AT,122:AR,94:e,109:AS,134:a,3:A1,41:Ac,184:A7,232:Ab,158:A5,67:A8,220:s,91:i,101:A4,8:A9,99:AV,34:T,223:AP,77:m,22:v,16:AJ,206:Ad,5:AL,150:AG,240:AC,234:U,44:n,69:r,243:AF,6:AW,70:AE,236:u,30:Af,100:b,130:A6,23:f,189:k,45:w,174:AH,183:p,162:q,80:AO,242:l,89:AZ,50:Ae,75:AA,76:AY,19:Aa,10:AD,113:V,106:AU,83:A3,225:AK,55:c,37:A2,17:AI}
B()
while B.a<L(C):
	try:W[C[B.a]]()
	except Z as X:
		A=[X]
		if not G:raise X
		P,Ag=G.pop()
		while F:
			Ah,Ai,Aj=F and F[-1]or(0,0,0)
			if Ah<=P:break
			F.pop()
		B.a=P+Ag
	B.a+=1