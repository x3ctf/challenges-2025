apiVersion: berg.norelect.ch/v1
kind: Challenge
metadata:
  name: netmsg-1
  namespace: berg
spec:
  categories:
    - rev

  difficulty: medium # Must be one of baby/easy/medium/hard/leet
  author: rdx4.2
  # Change to true if your challenge requires a reverse shell or other form of data exfiltration
  allowOutboundTraffic: false
  flag: x3c{h1dd3n_funct1on4lity_w00t_w00t}
  flagFormat: x3c{...}
  description: |
    <h2>pls use challs.x3c.tf:$PORT for the host instead of x3c.tf:$PORT</h2>
    You managed to got your hands on a secure commandline messaging application used by some suspicious people, along with the username/password `delta_star` / `whiskey_demon`.<br />
    Reportedly, there is some hidden functionality in the backend that has been since removed from the client. Figure out a way to access it to get the flag.
  containers:
    - hostname: netmsg-1
      image: gcr.io/mvm-x3ctf/x3ctf/challenge/netmsg-1:latest
      environment:
        WHATEVER: VALUE
      resourceLimits:
        cpu: "0.2"
        memory: "100Mi"
      ports:
        - port: 5001
          protocol: tcp # Must be either tcp/udp
          appProtocol: tcp # Signal to the frontend how to connect. For web services, use http. If unsure, use tcp.
          # Port type can be one of:
          # - publicHttpRoute: Expose this service via HTTPS with automatic HTTP to HTTPS redirection
          # - publicTlsRoute: Expose this service via a TLS-wrapped access
          # - publicPort: Expose this service on a random high port
          # - internalPort: Only expose this port for other containers, not to the public
          type: publicPort
  attachments:
    - fileName: netmsg-1.tar.gz
      downloadUrl: /handouts/netmsg-1.tar.gz
