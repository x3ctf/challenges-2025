package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"

	"github.com/99designs/gqlgen/graphql"
	"github.com/boxmein/cwte2024-chall/pkg/flagcookie"
	model1 "github.com/boxmein/cwte2024-chall/pkg/graph/model"
	"github.com/boxmein/cwte2024-chall/pkg/repository/exports"
	"github.com/boxmein/cwte2024-chall/pkg/repository/images"
	"github.com/boxmein/cwte2024-chall/pkg/repository/stories"
	"github.com/boxmein/cwte2024-chall/pkg/tenant"
)

// ImageURL is the resolver for the imageURL field.
func (r *exportResolver) ImageURL(ctx context.Context, obj *exports.Export) (*string, error) {
	if !obj.Ready {
		return nil, nil
	}
	s := fmt.Sprintf("/export/%d", obj.ID)
	return &s, nil
}

// URL is the resolver for the url field.
func (r *imageResolver) URL(ctx context.Context, obj *images.Image) (string, error) {
	return fmt.Sprintf("/images/%d", obj.ID), nil
}

// UploadImage is the resolver for the uploadImage field.
func (r *mutationResolver) UploadImage(ctx context.Context, file graphql.Upload) (int, error) {
	tenantID := tenant.GetTenantID(ctx)

	if file.Size > MAX_SIZE {
		return -1, fmt.Errorf("file too large")
	}
	if file.ContentType != "image/png" {
		return -1, fmt.Errorf("invalid content type")
	}

	data, err := io.ReadAll(file.File)
	if err != nil {
		return -1, err
	}

	if http.DetectContentType(data) != "image/png" {
		return -1, fmt.Errorf("invalid detected content type")
	}

	if bytes.Contains(data, []byte("<?php")) {
		return -1, fmt.Errorf("excuse me but this is a go server")
	}

	if bytes.Contains(data, []byte("bash")) {
		return -1, fmt.Errorf("this server is not capable of executing images lol")
	}

	id, err := r.DB.Images.SaveImage(ctx, tenantID, data)
	if err != nil {
		return -1, err
	}
	return int(id), nil
}

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, story model1.StoryInput) (*stories.Story, error) {
	tenantID := tenant.GetTenantID(ctx)
	createdStoryID, err := r.DB.Stories.NewStory(ctx, tenantID, stories.Story{
		Text:    story.Text,
		Action:  story.Action,
		ImageID: int64(story.Image),
	})
	if err != nil {
		return nil, err
	}
	loadedStory, err := r.DB.Stories.GetStory(ctx, tenantID, createdStoryID)
	if err != nil {
		return nil, err
	}
	return loadedStory, nil
}

// CreateStoryExport is the resolver for the createStoryExport field.
func (r *mutationResolver) CreateStoryExport(ctx context.Context, export model1.StoryExportInput) (*exports.Export, error) {
	tenantID := tenant.GetTenantID(ctx)
	exportID, err := r.DB.Exports.NewExport(ctx, tenantID, exports.Export{
		StoryID:    int64(export.StoryID),
		Dimensions: export.Dimensions,
	})

	if err != nil {
		return nil, err
	}

	loadedExport, err := r.DB.Exports.GetExport(ctx, tenantID, exportID)
	if err != nil {
		return nil, err
	}

	return loadedExport, nil
}

// Foo is the resolver for the foo field.
func (r *queryResolver) Foo(ctx context.Context) (int, error) {
	return 1234, nil
}

// Flag is the resolver for the flag field.
func (r *queryResolver) Flag(ctx context.Context) (string, error) {
	flag := flagcookie.GetFlagCookie(ctx)
	return flag, nil
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context) ([]*images.Image, error) {
	tenantID := tenant.GetTenantID(ctx)
	imageList, err := r.DB.Images.ListImageIDs(ctx, tenantID)
	if err != nil {
		return nil, err
	}
	imageObjList := make([]*images.Image, len(imageList))
	for i, id := range imageList {
		imageObjList[i] = &images.Image{ID: id}
	}
	return imageObjList, nil
}

// Stories is the resolver for the stories field.
func (r *queryResolver) Stories(ctx context.Context) ([]*stories.Story, error) {
	tenantID := tenant.GetTenantID(ctx)
	return r.DB.Stories.GetAllStories(ctx, tenantID)
}

// Exports is the resolver for the exports field.
func (r *queryResolver) Exports(ctx context.Context) ([]*exports.Export, error) {
	tenantID := tenant.GetTenantID(ctx)
	return r.DB.Exports.GetAllExports(ctx, tenantID)
}

// Story is the resolver for the story field.
func (r *queryResolver) Story(ctx context.Context, id int) (*stories.Story, error) {
	tenantID := tenant.GetTenantID(ctx)
	return r.DB.Stories.GetStory(ctx, tenantID, int64(id))
}

// Export is the resolver for the export field.
func (r *queryResolver) Export(ctx context.Context, id int) (*exports.Export, error) {
	tenantID := tenant.GetTenantID(ctx)
	return r.DB.Exports.GetExport(ctx, tenantID, int64(id))
}

// Image is the resolver for the image field.
func (r *storyResolver) Image(ctx context.Context, obj *stories.Story) (*images.Image, error) {
	return &images.Image{ID: obj.ImageID}, nil
}

// Export returns ExportResolver implementation.
func (r *Resolver) Export() ExportResolver { return &exportResolver{r} }

// Image returns ImageResolver implementation.
func (r *Resolver) Image() ImageResolver { return &imageResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Story returns StoryResolver implementation.
func (r *Resolver) Story() StoryResolver { return &storyResolver{r} }

type exportResolver struct{ *Resolver }
type imageResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type storyResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
const MAX_SIZE = 100 * 1024
